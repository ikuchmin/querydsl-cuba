
buildscript {
    ext.cubaVersion = '7.2.2'
    ext.querydslPluginVersion = '1.0.10'

    repositories {
        mavenLocal()
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
        
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0"
    }
}

def modulePrefix = 'querydsl-cuba'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'ru.udya.querydsl.cuba'
        version = '2.0.0'
        isSnapshot = true
    }
    tomcat {
        dir = "$project.rootDir/deploy/tomcat"
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
}

def postgres = 'org.postgresql:postgresql:42.2.9'

configure([globalModule, coreModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')
    apply(plugin: 'com.jfrog.bintray')

    sourceSets {
        test {
            java {
                srcDirs = ['test']
            }
        }
    }

    dependencies { 
            testCompile('junit:junit:4.12') 
        }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

        configurations = ['archives']

        publish = true
        override = false

        pkg {
            repo = 'querydsl-cuba'
            name = 'querydsl-cuba'
            desc = 'QueryDsl CUBA.platform App Component'

            websiteUrl = 'https://github.com/ikuchmin/querydsl-cuba'
            issueTrackerUrl = 'https://github.com/ikuchmin/querydsl-cuba/issues'
            vcsUrl = 'https://github.com/ikuchmin/querydsl-cuba.git'

            licenses = ["Apache-2.0"]
            labels = ['cuba-platform', 'opensource']
        }
    }
}

configure(globalModule) {

    dependencies {
        if (!JavaVersion.current().isJava8()) {
            runtime('javax.xml.bind:jaxb-api:2.3.1')
            runtime('org.glassfish.jaxb:jaxb-runtime:2.3.1')
        }

        compile group: 'com.querydsl', name: 'querydsl-jpa', version: '4.1.4'

        annotationProcessor group: 'com.querydsl', name: 'querydsl-apt', version: '4.1.4', classifier: 'jpa'
        annotationProcessor configurations.compile

        testAnnotationProcessor group: 'com.querydsl', name: 'querydsl-apt', version: '4.1.4', classifier: 'jpa'
        testAnnotationProcessor configurations.annotationProcessor

    }

    entitiesEnhancing {
        main {
            enabled = true
        }
        test {
            enabled = true
        }
    }

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compileOnly(servletApi)
        jdbc(postgres)
        testRuntime(postgres)

        compile group: 'com.querydsl', name: 'querydsl-jpa', version: '4.1.4'

        testCompile globalModule.sourceSets.test.output
        //testCompile group: 'joda-time', name: 'joda-time', version: '1.6'
        testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    }

    task cleanConf(description: 'Cleans up conf directory', type: Delete) {
        delete "$cuba.appHome/${modulePrefix}-core/conf"
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}-core"
        appJars(modulePrefix + '-global', modulePrefix + '-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'qc'
        dbUser = 'cuba'
        dbPassword = 'cuba'
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'qc'
        dbUser = 'cuba'
        dbPassword = 'cuba'
    }
}

task undeploy(type: Delete) {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}")
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
    }
}
restart.finalizedBy start
